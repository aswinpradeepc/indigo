# Generated by Django 3.2.13 on 2023-11-03 12:42
import logging

from django.db import migrations

from indigo_api.models import TaxonomyTopic

log = logging.getLogger(__name__)


def backfill_project_taxonomies(apps, schema_editor):
    Workflow = apps.get_model('indigo_api', 'Workflow')
    db_alias = schema_editor.connection.alias

    # create new topic root, 'Projects'
    projects_root = TaxonomyTopic.add_root(name='Projects')

    # create priority children: High, Medium, Low
    high_priority = TaxonomyTopic.add_child(projects_root, name='Priority: High')
    medium_priority = TaxonomyTopic.add_child(projects_root, name='Priority: Medium')
    low_priority = TaxonomyTopic.add_child(projects_root, name='Priority: Low')

    for project in Workflow.objects.using(db_alias).all():
        place = f'{project.country.name}, {project.locality.name}' if project.locality else project.country.country.name
        log.info(f'\nProcessing {project.title} in {place}')
        # scope project title to place
        new_title = f'{place} – {project.title}'
        priority_root = high_priority if project.priority else low_priority
        project_taxonomy = TaxonomyTopic.add_child(priority_root, name=new_title, description=project.description)

        # add project taxonomy to all related works
        for task in project.tasks.all():
            if task.work:
                work = task.work
                # TODO: neither of these options are working
                # TypeError: 'TaxonomyTopic' instance expected, got <TaxonomyTopic: South Africa – proooj>
                work.taxonomy_topics.add(project_taxonomy)
                # TypeError: 'Work' instance expected, got <Work: Work object (7)>
                project_taxonomy.works.add(work)


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_api', '0027_taxonomytopic_description'),
    ]

    operations = [
        migrations.RunPython(backfill_project_taxonomies, migrations.RunPython.noop)
    ]
