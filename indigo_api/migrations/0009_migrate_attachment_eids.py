# Generated by Django 2.2.20 on 2021-10-29 11:35

from django.db import migrations
from indigo_api.data_migrations import CorrectAttachmentEids
from django.db.models import signals


def forwards(apps, schema_editor):
    """ Migrate attachment eIds, and change annotations to no longer use the attachment scope prefix.
    """
    Document = apps.get_model('indigo_api', 'Document')
    Annotation = apps.get_model('indigo_api', 'Annotation')

    from indigo_api.models.documents import post_save_document
    from reversion.models import Version

    # disconnect signals
    signals.post_save.disconnect(post_save_document, Document)

    db_alias = schema_editor.connection.alias
    migration = CorrectAttachmentEids()

    for doc in Document.objects.using(db_alias).order_by('-pk').iterator(100):
        print(f"Migrating {doc}")
        if migration.migrate_document_xml(doc):
            print("  Changed")
            doc.save()

            # update annotations
            for old, new in migration.eid_mappings.items():
                # update sec_1 -> att_1__sec_1
                Annotation.objects.using(db_alias)\
                    .filter(document_id=doc.id, anchor_id=old)\
                    .update(anchor_id=new)

                # update prefixed anchors: att_1/sec_1 -> att_1/att_1__sec_1
                # we then strip the att_1/ bit for all annotations with SQL later
                prefix = new.split('__', 1)[0] + '/'
                assert(prefix.startswith('att_'))
                old = prefix + old
                new = prefix + new
                Annotation.objects.using(db_alias) \
                    .filter(document_id=doc.id, anchor_id=old) \
                    .update(anchor_id=new)
        else:
            print("  No changes")

    # migrate historical document versions
    print("Migrating versions")
    for version in Version.objects.get_for_model(Document).order_by('-pk').iterator(100):
        print(f"Migrating version {version.pk}")
        if migration.migrate_document_version(version):
            print("  Changed")
            version.save()
        else:
            print("  No changes")


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_api', '0008_taxonomy_vocabulary'),
    ]

    operations = [
        migrations.RunPython(forwards, migrations.RunPython.noop, elidable=True),

        # strip att_1/ from att_1/att_1__sec_1 in anchor ids
        # this ensures that ALL matching annotations are updated, not just those
        # rewritten by the above migration
        migrations.RunSQL(
            """
UPDATE indigo_api_annotation
SET anchor_id = substr(anchor_id, strpos(anchor_id, '/') + 1)
WHERE anchor_id like '%/%';
            """,
            migrations.RunSQL.noop, elidable=True),
    ]
