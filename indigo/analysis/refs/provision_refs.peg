grammar ProvisionRefs
  # This grammar matches runs of references, such as:
  #   Section 32(a), (b) and (f)(ii), 33 and chapter 4 of the Act
  #
  # The main reference is the "section 32" or "chapter 4", and form the root used by
  # the subsequent references.

  root        <- references (to_and_or references)* target? tail %root

                 # section 32
                 # section (a)
                 # section 32(a)(c)
                 # section 32.1a.2
  references  <- unit WS+ main_ref (to_and_or main_ref)* %references

  unit        <- unit_eng / unit_afr

  main_ref    <- (main_num / num) (WS* sub_refs)? %main_ref

                 # section 32
                 # section 32A
                 # section 32.1a.2
  main_num    <- digit alpha_num_dot* %main_num

                 # (a)(ii) to (iv)
                 # (a), (b) and (f)(ii)
                 # (a)(ii), (b)(iii) and (v), and (d)
  sub_refs    <- sub_ref (to_and_or sub_ref)* %sub_refs

                 # (a)
                 # (a) (ii)
  sub_ref     <- num (WS* num)* %sub_ref

                 # (a)
                 # (a1)
                 # (a-bis)
                 # (iv)
  num         <- "(" alpha_num_dot+ ")" %num

  to_and_or   <- range / and_or

                 # (a) to (b)
                 # (a), to (b)
  range       <- (WS* comma)? to %range

                 # (a) and (b)
                 # (a), or (b)
                 # (a), (b)
  and_or      <- ((WS* comma)? WS* _and WS+) %and_or
                 / ((WS* comma)? WS* _or WS+) %and_or
                 / (WS* comma WS*) %and_or

  target      <- of_this / of_the_act / thereof / of

                 # of this...
  of_this     <- comma? WS* (of_this_eng / of_this_afr) WS+ %of_this

                 # of the Act
  of_the_act  <- comma? WS* (of_the_act_eng) %of_the_act

                 # of...
  of          <- comma? WS* (of_eng / of_afr) WS+ %of

                 # thereof
  thereof     <- comma? WS* (thereof_eng / thereof_afr) %thereof

                 # this is simply all text after the reference, which could be none. This is required because
                 # the grammar expects to match the entire input, but we don't care about anything beyond the end
                 # of the reference.
                 # NB: we override the implementation of this method in the parser!
  tail        <- .*

  # --------
  # terminals
  # --------

                 # english
  unit_eng     <- `articles` / `article` /
                 `chapters` / `chapter` /
                 `items` / `item` /
                 `paragraphs` / `paragraph` /
                 `parts` / `part` /
                 `points` / `point` /
                 `regulations` / `regulation` /
                 `sections` / `section` /
                 `subparagraphs` / `subparagraph` /
                 `sub-paragraphs` / `sub-paragraph` /
                 `subregulations` / `subregulation` /
                 `sub-regulations` / `sub-regulation` /
                 `subsections` / `subsection` /
                 `sub-sections` / `sub-section`

                 # afrikaans
  unit_afr     <- `afdelings` / `afdeling` /
                 `artikels` / `artikel`
                 `dele` / `deel`
                 `hoofstukke` / `hoofstuk` /
                 `paragrawe` / `paragraaf` /
                 `punte` / `punt` /
                 `subafdelings` / `subafdeling` /
                 `subparagrawe` / `subparagraaf`

  _and        <- and_eng / and_afr
  and_eng      <- `and`
  and_afr      <- `en`

  _or         <- or_eng / or_afr
  or_eng       <- `or`
  # HACK: Afrikaans 'of' for 'or' not supported because it clashes with English 'of'
  or_afr       <- or_eng # `of`

                 # note that "tot" must come before "to" because the latter is a substring of the former
                 # whitespace is required around 'to' word, optional around dashes
  to          <- WS* dash WS* / WS+ to_afr WS+ / WS+ to_eng WS+
  dash        <- `-` / `–` / `—`
  to_eng       <- `to`
  to_afr       <- `tot`

  of_eng       <- `of`
  of_afr       <- `van`

  of_this_eng  <- `of this`
  of_this_afr  <- `van hierdie`

  of_the_act_eng <- `of the Act` / `of the act`

  thereof_eng  <- `thereof`
  thereof_afr  <- `daarvan`

  comma       <- [,;]
  digit       <- [0-9]
  alpha_num_dot <- [a-zA-Z0-9.-]
  WS          <- " " / "\t" / "\n"
