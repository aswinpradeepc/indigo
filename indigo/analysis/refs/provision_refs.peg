grammar ProvisionRefs
  # This grammar matches runs of references, such as:
  #   Section 32(a), (b) and (f)(ii), 33 and chapter 4 of the Act
  #
  # The main reference is the "section 32" or "chapter 4", and form the root used by
  # the subsequent references.

  root        <- references (to_and_or references)* target? tail %root

  references  <- attachment_ref / unit_refs

  attachment_ref <- attachment_num_ref / the_attachment_ref

                 # Schedule 1
                 # Schedule 1A
                 # Schedule 1 and 2
  attachment_num_ref <- schedule__i18n WS+ main_num (to_and_or main_num)* %attachment_num_ref

                 # the Schedule
                 # TODO: the First Schedule etc.
  the_attachment_ref <- the_schedule__i18n ![a-zA-Z] %the_attachment_ref

                 # section 32
                 # section (a)
                 # section 32(a)(c)
                 # section 32.1a.2
  unit_refs   <- unit__i18n WS+ main_ref (to_and_or main_ref)* %unit_refs

  main_ref    <- (main_num / num) (WS* sub_refs)? %main_ref

                 # section 32
                 # section 32A
                 # section 32.1a.2
  main_num    <- digit alpha_num_no_trailing_dot* %num

                 # (a)(ii) to (iv)
                 # (a), (b) and (f)(ii)
                 # (a)(ii), (b)(iii) and (v), and (d)
  sub_refs    <- sub_ref (to_and_or sub_ref)* %sub_refs

                 # (a)
                 # (a) (ii)
  sub_ref     <- num (WS* num)* %sub_ref

                 # (a)
                 # (a1)
                 # (a-bis)
                 # (iv)
  num         <- "(" alpha_num_dot+ ")" %num

  to_and_or   <- range / and_or

                 # (a) to (b)
                 # (a), to (b)
  range       <- (WS* comma)? to %range

  to          <- WS* dash WS* / WS+ to__i18n WS+

                 # (a) and (b)
                 # (a), or (b)
                 # (a), (b)
  and_or      <- ((WS* comma)? WS* and__i18n WS+) %and_or
                 / ((WS* comma)? WS* or__i18n WS+) %and_or
                 / (WS* comma WS*) %and_or

  target      <- of_this / of_the_act / thereof / of_that_act / of

                 # of this...
  of_this     <- comma? WS* (of_this__i18n) WS+ %of_this

                 # of the Act
  of_the_act  <- comma? WS* (of_the_act__i18n) %of_the_act

                 # of...
  of          <- comma? WS* (of__i18n) WS+ %of

                 # thereof
  thereof     <- comma? WS* (thereof__i18n) %thereof

                 # of that act (synonym for thereof)
  of_that_act <- comma? WS* (of_that_act__i18n) %thereof

                 # this is simply all text after the reference, which could be none. This is required because
                 # the grammar expects to match the entire input, but we don't care about anything beyond the end
                 # of the reference.
                 # NB: we override the implementation of this method in the parser!
  tail        <- .*

  # --------
  # language-switching terminals
  #
  # the xxx__i18n rules will be patched in python to use the rule for the current language
  # --------

  and__i18n         <- ""
  of__i18n          <- ""
  of_the_act__i18n  <- ""
  of_that_act__i18n <- ""
  of_this__i18n     <- ""
  or__i18n          <- ""
  thereof__i18n     <- ""
  to__i18n          <- ""
  unit__i18n        <- ""
  schedule__i18n    <- ""
  the_schedule__i18n <- ""

  # --------
  # translated terminals
  #
  # NB: if items are changed or added here, the list of the XML elements they correspond to must be updated in
  #     ProvisionRefsReslover.element_names in indigo/analysis/refs/provisions.py
  # --------

                 # english
  unit_eng     <- `articles` / `article` /
                 `chapters` / `chapter` /
                 `items` / `item` /
                 `paragraphs` / `paragraph` /
                 `parts` / `part` /
                 `points` / `point` /
                 `regulations` / `regulation` /
                 `sections` / `section` /
                 `subparagraphs` / `subparagraph` /
                 `sub-paragraphs` / `sub-paragraph` /
                 `sub paragraphs` / `sub paragraph` /
                 `subregulations` / `subregulation` /
                 `sub-regulations` / `sub-regulation` /
                 `sub regulations` / `sub regulation` /
                 `subsections` / `subsection` /
                 `sub-sections` / `sub-section` /
                 `sub sections` / `sub section`

                 # afrikaans
  unit_afr     <- `afdelings` / `afdeling` /
                 `artikels` / `artikel`
                 `dele` / `deel`
                 `hoofstukke` / `hoofstuk` /
                 `paragrawe` / `paragraaf` /
                 `punte` / `punt` /
                 `subafdelings` / `subafdeling` /
                 `subparagrawe` / `subparagraaf`

                 # french
  unit_fra     <- `articles` / `article` /
                  `chapitres` / `chapitre` /
                  `paragraphes` / `paragraphe` /
                  `parties` / `partie` /
                  `points` / `point` /
                  `règlements` / `règlement` /
                  `reglements` / `reglement` /
                  `sections` / `section` /
                  `sous-paragraphes` / `sous-paragraphe` /
                  `sous-règlements` / `sous-règlement` /
                  `sous-reglements` / `sous-reglement` /
                  `sous-sections` / `sous-section`

  schedule_eng <- `schedules` / `schedule`
  schedule_afr <- `bylae` / `bylaag`
  schedule_fra <- `annexes` / `annexe`
  the_schedule_eng <- `the schedule`
  the_schedule_afr <- `die bylaag`
  the_schedule_fra <- `l'annexe`

  and_eng      <- `and`
  and_afr      <- `en`
  and_fra      <- `et`

  or_eng       <- `or`
  or_afr       <- `of`
  or_fra       <- `ou`

  to_eng       <- `to`
  to_afr       <- `tot`
  to_fra       <- `à` / `a`

  of_eng       <- `of`
  of_afr       <- `van`
  of_fra       <- `de`

  of_this_eng  <- `of this`
  of_this_afr  <- `van hierdie`
  of_this_fra  <- `de cette` / `de ce`

  of_the_act_eng <- `of the Act` / `of the act`
  of_the_act_afr <- `van die Wet` / `van die wet`
  of_the_act_fra <- `de la Loi` / `de la loi`

  of_that_act_eng <- `of that Act` / `of that act`
  of_that_act_afr <- `van daardie Wet` / `van daardie wet`
  of_that_act_fra <- `de cette Loi` / `de cette loi`

  thereof_eng  <- `thereof`
  thereof_afr  <- `daarvan`
  thereof_fra  <- `de cela`

  # --------
  # terminals
  # --------

  dash        <- `-` / `–` / `—`
  comma       <- [,;]
  digit       <- [0-9]
  alpha_num_dot <- [a-zA-Z0-9.-]
  alpha_num_no_trailing_dot <- [a-zA-Z0-9-] / ('.' [a-zA-Z0-9])
  WS          <- " " / "\t" / "\n"
